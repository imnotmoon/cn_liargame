{"version":3,"sources":["../node_modules/typescript/lib sync","components/ChatMessage.js","components/Chat.js","components/Vote.js","components/FinishModal.js","views/InGame.js","components/WaitingRoom.js","components/StartGameModal.js","views/Waiting.js","components/Header.js","components/NicknameModal.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ChatMessage","chat","content","from","className","Chat","title","mount","useState","inputMessage","setInputMessage","messages","setMessages","useContext","NicknameContext","nickname","onInputChange","currentTarget","value","onSubmitClick","preventDefault","socket","emit","state","name","text","inputEnterEvent","key","useEffect","document","getElementById","addEventListener","removeEventListener","console","log","on","a","player","offAny","Consumer","map","index","type","onChange","onClick","Vote","liar","voteCnt","setVoteCnt","PlayerContext","players","onCheck","forEach","vote","getAttribute","alert","data","result","picked","FinishModal","setPicked","win","setWin","pickedCnt","Object","InGame","gameTime","setGameTime","didMount","setDidMount","setPlayers","finishModal","setFinishModal","startTimer","i","timer","setInterval","voteMessage","find","item","clearInterval","Provider","React","createContext","WaitingRoom","length","StartGameModal","word","Waiting","setNowPlaying","NowPlayingContext","activeModal","setActiveModal","setLiar","setWord","addPlayer","setTimeout","Header","window","open","close","NicknameModal","setNickname","currentNickname","setCurrentNickname","onButtonClick","placeholder","io","connect","App","nowPlaying","ReactDOM","render"],"mappings":";sFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,qfCaVC,MAZf,YAAgC,IAATC,EAAQ,EAARA,KAEXC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,KAEjB,OACI,uBAAMC,UAAoB,SAATD,EAAkB,yBAA2B,cAA9D,UACI,sBAAMC,UAAU,gBAAhB,SAA0C,SAATD,EAAkB,GAAKA,IACxD,sBAAMC,UAAU,aAAhB,SAA8BF,Q,MCiH3BG,MAtHf,YAAiC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MAAS,EACSC,mBAAS,IADlB,mBACxBC,EADwB,KACVC,EADU,OAECF,mBAAS,IAFV,mBAExBG,EAFwB,KAEdC,EAFc,OAGCC,qBAAWC,GAHZ,mBAGxBC,EAHwB,KAKzBC,GALyB,KAKT,SAACxB,GACtBkB,EAAgBlB,EAAEyB,cAAcC,SAG3BC,EAAgB,SAAC3B,GACtBA,EAAE4B,iBAGFC,EAAOC,KAAK,OAAQ,CACnBC,MAAO,OACPC,KAAMT,EACNU,KAAMhB,IAMPG,GAAY,SAACD,GAAD,4BACRA,GADQ,CAEX,CACCT,QAASO,EACTN,KAAM,aAGRO,EAAgB,KAGXgB,EAAkB,SAAClC,GACV,UAAVA,EAAEmC,KAA6B,WAAVnC,EAAEmC,MAC1BlB,GACCG,GAAY,SAACD,GAAD,4BACRA,GADQ,CAEX,CACCT,QAASO,EACTN,KAAM,aAGTO,EAAgB,MA6ClB,OAzCAkB,qBAAU,WACT,GAAIrB,EAIH,OAHAsB,SACEC,eAAe,cACfC,iBAAiB,WAAYL,GACxB,WACN,IACCG,SACEC,eAAe,cACfE,oBAAoB,WAAYN,GACjC,SACDO,QAAQC,IAAI,uBAMhBN,qBAAU,WAqBT,OAnBAP,EAAOc,GAAG,OAAV,uCAAkB,iCAAAC,EAAA,sDAASb,EAAT,EAASA,MAAOc,EAAhB,EAAgBA,OAAQZ,EAAxB,EAAwBA,KACzCQ,QAAQC,IAAI,OAAQG,EAAQZ,GAG5BY,EAASA,IAAWtB,EAAW,OAASsB,EAI9B,SAAVd,GACCX,GAAY,SAACD,GAAD,4BACRA,GADQ,CAEX,CACCT,QAASuB,EACTtB,KAAMkC,QAbQ,2CAAlB,uDAmBOhB,EAAOiB,WACZ,IAGF,cAACxB,EAAgByB,SAAjB,UACE,kBACA,sBAAKnC,UAAU,aAAf,UACC,qBAAKA,UAAU,cAAf,SACC,4BAAIE,MAEL,qBAAKF,UAAU,gBAAf,SACEO,EAAS6B,KAAI,SAACvC,EAAMwC,GAAP,OACb,cAAC,EAAD,CAECxC,KAAMA,EACNG,UAAU,kBAFLqC,QAMR,sBAAKrC,UAAU,eAAf,UACC,uBACCsC,KAAK,OACLC,SAAU3B,EACVE,MAAOT,EACPV,GAAG,eAEJ,wBAAQ6C,QAASzB,EAAjB,oC,YC9CS0B,MA3Df,YAAgC,IAAhBC,EAAe,EAAfA,KAAMxC,EAAS,EAATA,MAAS,EAEGE,mBAAS,GAFZ,mBAEpBuC,EAFoB,KAEXC,EAFW,OAGKnC,qBAAWC,GAHhB,mBAGpBC,EAHoB,aAIGF,qBAAWoC,IAJd,mBAIpBC,EAJoB,KAMrBC,GANqB,KAMX,SAAC3D,GACTuD,EAAU,GAEVG,EAAQE,SAAQ,SAACf,GACbA,EAAOgB,KAAOhB,EAAOtB,WAAavB,EAAEyB,cAAcqC,aAAa,QAAU,EAAI,KAEjFrB,QAAQC,IAAIgB,GAGZF,GAAW,SAAAD,GAAO,OAAIA,EAAU,MAEhCQ,MAAM,4EAId,OACI,cAACN,EAAcV,SAAf,UACK,kBACG,sBAAKnC,UAAU,aAAf,UACI,qBAAKA,UAAU,cAAf,SACI,4BAAIE,MAELwC,EAcG,qBAAK1C,UAAU,eAAf,SACG8C,EAAQV,KAAI,SAACH,EAAQI,GAAT,OACTJ,EAAOtB,WAAaA,GAChB,gCACI,+BAAOsB,EAAOtB,WACd,+DAFM0B,QAhBpB,sBAAKrC,UAAU,gBAAf,UACG8C,EAAQV,KAAI,SAACH,EAAQI,GAAT,OACTJ,EAAOtB,WAAaA,GAChB,sBAAiB6B,QAASO,EAASK,KAAMnB,EAAOtB,SAAUX,UAAW,cAAgC,IAAhBiC,EAAOgB,KAAa,SAAW,IAApH,UACI,+BAAOhB,EAAOtB,WACd,qBAAKX,UAAU,cAAf,iBAFMqC,MAMlB,8BACI,0EAAeM,EAAf,2BCvC5BU,G,MAAS,CACTX,KAAM,qBACNY,OAAQ,CACJ,qBAAO,qBACP,qBAAO,qBACP,qBAAO,wBAkFAC,MA9Ef,YAA0C,IAAnBb,EAAkB,EAAlBA,KAAM/B,EAAY,EAAZA,SAAY,EAETP,mBAAS,IAFA,mBAE9BkD,EAF8B,KAEtBE,EAFsB,OAGfpD,oBAAS,GAHM,mBAG9BqD,EAH8B,KAGzBC,EAHyB,KA+CrC,OAxCAlC,qBAAU,WAcN,GAbAK,QAAQC,IAAIuB,GAGZpC,EAAOc,GAAG,SAAV,uCAAoB,iCAAAC,EAAA,sDAAQb,EAAR,EAAQA,MAAOuB,EAAf,EAAeA,KAAMY,EAArB,EAAqBA,OACrCzB,QAAQC,IAAI,6BAA8BY,EAAMY,GAEpC,UAATnC,IACCkC,EAAOX,KAAOA,EACdW,EAAOC,OAASA,GALJ,2CAApB,uDAUa,IAATZ,EAAY,CACZ,IAAIiB,EAAY,EAChBC,OAAOrE,KAAK8D,EAAOC,QAAQN,SAAQ,SAACf,GAChC,IAAMgB,EAAOI,EAAOC,OAAOrB,GAC3BJ,QAAQC,IAAIG,EAAQgB,GAChBA,IAASI,EAAOX,OAChBiB,GAAa,EACbH,GAAU,SAAAF,GAAM,4BAAQA,GAAR,CAAgBrB,OAChCJ,QAAQC,IAAIwB,OAGAI,IAAhBC,GAAa,SAGjBC,OAAOrE,KAAK8D,EAAOC,QAAQN,SAAQ,SAACf,GAChC,IAAMgB,EAAOI,EAAOC,OAAOrB,GACvBA,IAAWtB,GAAYsC,IAASI,EAAOX,OACvCb,QAAQC,IAAInB,EAAUsB,EAAQoB,EAAOX,KAAMO,GAC3CpB,QAAQC,IAAI,4BACZ4B,GAAO,SAAAD,GAAG,OAAKA,WAI5B,IAIC,sBAAKzD,UAAU,0BAAf,UACI,qBAAKA,UAAU,QAAf,UACa,IAARyD,EAAe,gEAAgB,mEAE1B,IAARA,EACI,GAEW,IAATf,EAEQ,gCACI,yDACA,8BAAMW,EAAOX,UAIjB,gCACI,sGACA,8BACKY,EAAOlB,KAAI,SAACH,EAAQI,GAAT,OACR,+BAAmBJ,GAARI,e,MC/EpC,SAASwB,EAAT,GAA2B,IAATnB,EAAQ,EAARA,KAAQ,EAELtC,mBAAS,KAFJ,mBAE9B0D,EAF8B,KAEpBC,EAFoB,OAGL3D,oBAAS,GAHJ,mBAG9B4D,EAH8B,KAGpBC,EAHoB,OAIP7D,mBAAS,IAJF,mBAI9B0C,EAJ8B,KAIrBoB,EAJqB,OAKC9D,oBAAS,GALV,mBAK9B+D,EAL8B,KAKjBC,EALiB,OAML3D,qBAAWC,GANN,mBAM9BC,EAN8B,UAQrCa,qBAAU,WAEN0C,EAAW,CACP,CAAEvD,SAAU,qBAAOsC,KAAM,GACzB,CAAEtC,SAAU,qBAAOsC,KAAM,GACzB,CAAEtC,SAAU,qBAAOsC,KAAM,GACzB,CAAEtC,SAAU,qBAAOsC,KAAM,KAE7BoB,IAEAJ,GAAY,KACb,IAGH,IAAMI,EAAa,WACf,IAAIC,EAAI,IACJC,EAAQC,aAAY,WAEpB,GADAT,GAAY,SAAAD,GAAQ,OAAIA,EAAW,IAAGQ,GAAK,GACjC,IAANA,EAAS,CAGT,IAAMG,EAAc3B,EAAQ4B,MAAK,SAACC,GAAD,OAAwB,IAAdA,EAAK1B,QAChDhC,EAAOC,KAAK,OAAQuD,GAEpBL,GAAe,GACfQ,cAAcL,MAEnB,MAGP,OACI,mCACI,cAAC7D,EAAgByB,SAAjB,UACK,kBACG6B,GACA,qCACI,8BAAMF,IACN,sBAAK9D,UAAU,SAAf,UACI,cAAC6C,EAAcgC,SAAf,CAAwB/D,MAAO,CAACgC,EAASoB,GAAzC,SACc,IAATxB,EACK,cAAC,EAAD,CAAMA,MAAM,EAAOxC,MAAM,uDACzB,cAAC,EAAD,CAAMwC,MAAM,EAAMxC,MAAM,mDAGlC,cAAC,EAAD,CAAMA,MAAgB,IAATwC,EAAa,0DAAe,8EAAmBvC,MAAO6D,OAEtEG,GACG,qCACI,cAAC,EAAD,CAAazB,KAAMA,EAAM/B,SAAUA,IACnC,qBAAKX,UAAU,gCAYxC,IAAM6C,EAAgBiC,IAAMC,gB,MCvDpBC,MAlBf,YAAmC,IAAZlC,EAAW,EAAXA,QACnB,OACI,sBAAK9C,UAAU,oBAAf,UACI,qBAAKA,UAAU,qBAAf,SACI,qDAEJ,gCACI,4DAAW8C,EAAQmC,OAAnB,cACCnC,EAAQV,KAAK,SAACH,EAAQI,GAAT,OACV,qBAAiBrC,UAAU,sBAA3B,SACI,4BAAIiC,KADEI,a,MCoBf6C,MAxBf,YAAyC,IAAfxC,EAAc,EAAdA,KAAMyC,EAAQ,EAARA,KAC5B,OACI,sBAAKnF,UAAU,6BAAf,UACI,qBAAKA,UAAU,QAAf,SACK0C,EACK,yFACA,yGAIRA,GACE,qBAAK1C,UAAU,OAAf,SACI,8BACI,4BAAImF,QAIhB,qBAAKnF,UAAU,wBAAf,kF,MCxBG,SAASoF,IAAW,IAAD,EACX3E,qBAAWC,GADA,mBAE3B2E,GAF2B,UAEX5E,qBAAW6E,IAFA,EAGHlF,mBAAS,IAHN,mBAG1B0C,EAH0B,KAGjBoB,EAHiB,OAIK9D,oBAAS,GAJd,mBAI1BmF,EAJ0B,KAIbC,EAJa,OAOTpF,oBAAS,GAPA,mBAO1BsC,EAP0B,KAOpB+C,EAPoB,OAQTrF,mBAAS,gBARA,mBAQ1B+E,EAR0B,KAQpBO,EARoB,KAcjClE,qBAAU,WAsBT,OApBAP,EAAOc,GAAG,QAAV,uCAAmB,+BAAAC,EAAA,sDAASb,EAAT,EAASA,MAAOc,EAAhB,EAAgBA,OAClCJ,QAAQC,IAAI,QAASG,GAGX,UAAVd,GAAqB+C,GAAW,SAACpB,GAAD,4BAAiBA,GAAjB,CAA0Bb,OAJxC,2CAAnB,uDAUAhB,EAAOc,GAAG,WAAW,YAAoC,IAAjCZ,EAAgC,EAAhCA,MAAOc,EAAyB,EAAzBA,OAAQS,EAAiB,EAAjBA,KAAMyC,EAAW,EAAXA,KAC5CtD,QAAQC,IAAI,UAAWG,EAAQS,EAAMyC,GAEvB,YAAVhE,IACIsE,IAAP/C,GACAA,GAAQgD,EAAQP,OAKXlE,EAAOiB,WACZ,IAGH,IAAMyD,EAAY,WACjBzB,EAAW,GAAD,mBAAKpB,GAAL,CAAc,cACD,IAAnBA,EAAQmC,SAOXO,GAAe,GACfI,YAAW,WACVJ,GAAe,GAEdH,EADG3C,EACW,EAEA,KAEb,OAIL,OACC,cAAChC,EAAgByB,SAAjB,UACE,kBACA,qCACC,wBAAQK,QAASmD,EAAjB,gCACA,cAACL,EAAkBnD,SAAnB,UACE,kBACA,sBAAKnC,UAAU,UAAf,UACC,cAAC,EAAD,CAAa8C,QAASA,IACtB,cAAC,EAAD,CAAM5C,MAAO,eAAMC,OAAO,UAI5BoF,GACA,qCACC,cAAC,EAAD,CAAgB7C,KAAMA,EAAMyC,KAAMA,IAClC,qBAAKnF,UAAU,8B,MC7DP6F,MApBf,WAUI,OACI,sBAAK7F,UAAU,SAAf,UACI,+DACA,qBAAKA,UAAU,kBAAkBwC,QAXrB,WAIhBsD,OAAOC,KAAK,cAAe,SAC3BD,OAAOE,SAMH,SACI,yD,MCPD,SAASC,EAAT,GAAyC,IAAhBC,EAAe,EAAfA,YAAe,EACR9F,mBAAS,IADD,mBAC/C+F,EAD+C,KAC9BC,EAD8B,KAGhDxF,EAAgB,SAACxB,GACtBgH,EAAmBhH,EAAEyB,cAAcC,QAG9BuF,EAAgB,SAACjH,GACtB8G,EAAYC,GAGXlF,EAAOC,KAAK,QAAS,CACpBC,MAAO,QACPc,OAAQkE,IAETtE,QAAQC,IAAI,4BAId,OACC,cAACpB,EAAgByB,SAAjB,UACE,kBACA,sBAAKnC,UAAU,4BAAf,UACC,qBAAKA,UAAU,QAAf,6CACA,qBAAKA,UAAU,UAAf,SACC,oHAED,uBACCsC,KAAK,OACLgE,YAAY,qBACZ/D,SAAU3B,IAEX,uBACA,qBAAKZ,UAAU,YAAYwC,QAAS6D,EAApC,gC,YChCMpF,E,OAASsF,EAAGC,QAAH,UADH,gCAGF,SAASC,IAAO,IAAD,EACGrG,mBAAS,IADZ,mBACtBO,EADsB,KACZuF,EADY,OAEO9F,mBAAS,GAFhB,mBAEtBsG,EAFsB,KAEVrB,EAFU,KAc7B,OAVA7D,qBAAU,WACTP,EAAOc,GACN,cACA,SAACqB,GACAvB,QAAQC,IAAIsB,KAEb,OAKD,cAAC1C,EAAgBmE,SAAjB,CAA0B/D,MAAO,CAACH,EAAUuF,GAA5C,SACC,sBAAKlG,UAAU,MAAf,UACC,cAAC,EAAD,IACA,cAACsF,EAAkBT,SAAnB,CAA4B/D,MAAOuE,EAAnC,SACiB,IAAfqB,EACA,cAAC,EAAD,CAAQhE,KAAMgE,IAEd,cAAC,EAAD,OAGA/F,GACD,qCACC,cAAC,EAAD,CAAeuF,YAAaA,IAC5B,qBAAKlG,UAAU,6BASd,IAAMU,EAAkBoE,IAAMC,gBACxBO,EAAoBR,IAAMC,gBC9CvC4B,IAASC,OACP,cAAC,EAAD,IACAnF,SAASC,eAAe,W","file":"static/js/main.8186f729.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 24;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nChatMessage.propTypes = {\n\n    // chat : { content(채팅내용), from(누가 보낸 채팅인지) }\n    chat: PropTypes.object.isRequired\n}\n\nfunction ChatMessage({ chat }) {\n\n    const { content, from } = chat\n\n    return (\n        <span className={from === 'self' ? \"chatMessage my_message\" : \"chatMessage\"}>\n            <span className=\"chat__profile\">{from === 'self' ? '' : from}</span>\n            <span className=\"chat__text\">{content}</span>\n        </span>\n    )\n}\n\nexport default ChatMessage\n","import React, { useState, useEffect, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./Chat.css\";\nimport { NicknameContext, socket } from \"../App\";\n\nChat.propTypes = {\n\t// 채팅방의 제목\n\ttitle: PropTypes.string.isRequired,\n};\n\nfunction Chat({ title, mount }) {\n\tconst [inputMessage, setInputMessage] = useState(\"\"); // 지금 입력하고 있는 메시지 내용\n\tconst [messages, setMessages] = useState([]); // 대화내용\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\n\tconst onInputChange = (e) => {\n\t\tsetInputMessage(e.currentTarget.value);\n\t};\n\n\tconst onSubmitClick = (e) => {\n\t\te.preventDefault();\n\n\t\t// socekt : 소켓 통신을 통해 서버로 메시지 전송\n\t\tsocket.emit(\"chat\", {\n\t\t\tstate: \"chat\",\n\t\t\tname: nickname,\n\t\t\ttext: inputMessage,\n\t\t});\n\n\t\t// messages 배열에 내가 입력한 메시지로 추가\n\t\t// from이 'self'면 내가 보낸 메시지\n\t\t// socket : 테스트용!!!!! 통신 제대로 되면 이거 안쓸예정\n\t\tsetMessages((messages) => [\n\t\t\t...messages,\n\t\t\t{\n\t\t\t\tcontent: inputMessage,\n\t\t\t\tfrom: \"self\",\n\t\t\t},\n\t\t]);\n\t\tsetInputMessage(\"\");\n\t};\n\n\tconst inputEnterEvent = (e) => {\n\t\tif (e.key === \"Enter\" || e.key === \"Return\") {\n\t\t\tinputMessage &&\n\t\t\t\tsetMessages((messages) => [\n\t\t\t\t\t...messages,\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent: inputMessage,\n\t\t\t\t\t\tfrom: \"self\",\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\tsetInputMessage(\"\");\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (mount) {\n\t\t\tdocument\n\t\t\t\t.getElementById(\"input-text\")\n\t\t\t\t.addEventListener(\"keypress\", inputEnterEvent);\n\t\t\treturn () => {\n\t\t\t\ttry {\n\t\t\t\t\tdocument\n\t\t\t\t\t\t.getElementById(\"input-text\")\n\t\t\t\t\t\t.removeEventListener(\"keypress\", inputEnterEvent);\n\t\t\t\t} catch {\n\t\t\t\t\tconsole.log(\"아직..\");\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\tuseEffect(() => {\n\t\t// socket : 채팅 메시지 수신\n\t\tsocket.on(\"chat\", async ({ state, player, text }) => {\n\t\t\tconsole.log(\"chat\", player, text);\n\n\t\t\t// 채팅 보낸사람이 나면 self로 바꾸고 아니면 그대로 냅둔다.\n\t\t\tplayer = player === nickname ? \"self\" : player;\n\n\t\t\t// pseudo code - 채팅내용을 받아와서 messages 배열에 추가\n\t\t\t// 지금 유저 닉네임 받아와서 비교해야하는데 일단은 그냥 때려박음\n\t\t\tstate === \"chat\" &&\n\t\t\t\tsetMessages((messages) => [\n\t\t\t\t\t...messages,\n\t\t\t\t\t{\n\t\t\t\t\t\tcontent: text,\n\t\t\t\t\t\tfrom: player,\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t});\n\n\t\t// socket : 컴포넌트 죽을때 리스너 제거\n\t\treturn socket.offAny();\n\t}, []);\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"chat frame\">\n\t\t\t\t\t<div className=\"chat__title\">\n\t\t\t\t\t\t<p>{title}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__content\">\n\t\t\t\t\t\t{messages.map((chat, index) => (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tchat={chat}\n\t\t\t\t\t\t\t\tclassName=\"chat__messages\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__sender\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t\t\tvalue={inputMessage}\n\t\t\t\t\t\t\tid=\"input-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={onSubmitClick}>전송</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n\nexport default Chat;\n","import React, { useState, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext } from '../App'\nimport { PlayerContext } from '../views/InGame'\nimport { isPartiallyEmittedExpression } from 'typescript'\nimport './Vote.css'\nimport { socket } from '../App'\n\nVote.propTypes = {\n    // 라이어인지 아닌지\n    liar: PropTypes.bool.isRequired,\n\n    // 타이틀\n    title: PropTypes.string.isRequired,\n}\n\nfunction Vote({ liar, title }) {\n\n    const [voteCnt, setVoteCnt] = useState(3)\n    const [nickname, setNickname] = useContext(NicknameContext)\n    const [players, setPlayers] = useContext(PlayerContext)\n\n    const onCheck = (e) => {\n        if (voteCnt > 0) {\n            // 클릭된 플레이어의 인덱스 가져오기 + 클릭된 플레이어에게 체크 + 다른 플레이어에게 체크된거 제거\n            players.forEach((player) => {\n                player.vote = player.nickname === e.currentTarget.getAttribute('data') ? 1 : 0\n            })\n            console.log(players)\n\n            // voteCnt 하나 내리기\n            setVoteCnt(voteCnt => voteCnt - 1)\n        } else {\n            alert('더 이상 투표할 수 없습니다')\n        }\n    }\n\n    return (\n        <PlayerContext.Consumer>\n            {() => (\n                <div className=\"vote frame\">\n                    <div className=\"vote__title\">\n                        <p>{title}</p>\n                    </div>\n                    { !liar\n                        ? <div className=\"vote__players\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index} onClick={onCheck} data={player.nickname} className={\"vote__cell\" + (player.vote === 1 ? \" check\" : \"\")}>\n                                        <span>{player.nickname}</span>\n                                        <div className=\"vote__check\">O</div>\n                                    </div>\n                                )\n                            ))}\n                            <div>\n                                <p>남은 투표 횟수 : {voteCnt}/3 회</p>\n                            </div>\n                        </div>\n                        : <div className=\"vote__status\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index}>\n                                        <span>{player.nickname}</span>\n                                        <span>나를 지목</span>\n                                    </div>\n                                )\n                            ))}\n                        </div>\n                    }\n                </div>\n            )}\n        </PlayerContext.Consumer>\n    )\n}\n\nexport default Vote\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport NicknameContext from '../App'\nimport './FinishModal.css'\nimport { socket } from '../App'\n\nFinishModal.propTypes = {\n\n    // 1이면 정상인, 2면 라이어\n    liar: PropTypes.number.isRequired,\n\n    // 내 닉네임\n    nickname: PropTypes.string.isRequired\n}\n\n//! 가상의 결과데이터\nlet result = {\n    liar: '조세희',\n    picked: {\n        '문상혁': '조세희',\n        '이하은': '조세희',\n        '정세은': '문상혁'\n    }\n}\n\nfunction FinishModal({ liar, nickname }) {\n\n    const [picked, setPicked] = useState([])\n    const [win, setWin] = useState(false)\n\n\n    // socket : 동기 안맞을수도 있음 -> result를 state로 바꿔주면됨\n    useEffect(() => {\n        console.log(result)\n\n        // socket : 게임 결과를 전달받음\n        socket.on('result', async ({state, liar, picked}) => {\n            console.log('result message received : ', liar, picked)\n\n            if(state == 'result') {\n                result.liar = liar\n                result.picked = picked\n            }\n        })\n\n        // 결과(result) 데이터 처리\n        if (liar === 2) {        // 내가 라이어인 경우\n            let pickedCnt = 0\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                console.log(player, vote)\n                if (vote === result.liar) {\n                    pickedCnt += 1\n                    setPicked(picked => [...picked, player])\n                    console.log(picked)\n                }\n            })\n            if (pickedCnt >= 2) setWin(false)\n            else setWin(true)\n        } else {                // 내가 정상인인 경우\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                if (player === nickname && vote === result.liar) {\n                    console.log(nickname, player, result.liar, vote)\n                    console.log(\"이겼구만\")\n                    setWin(win => !win)\n                }\n            })\n        }\n    }, [])\n\n\n    return (\n        <div className=\"finishModal frame modal\">\n            <div className=\"title\">\n                {win === true ? \"게임에서 승리했습니다\" : \"게임에서 패배했습니다\"}\n            </div>\n            { win === true\n                ? \"\"\n                : (\n                    liar === 1\n                        ? (\n                            <div>\n                                <p>라이어는</p>\n                                <div>{result.liar}</div>\n                            </div>\n                        )\n                        : (\n                            <div>\n                                <p>나를 라이어로 지목한 사람</p>\n                                <div>\n                                    {picked.map((player, index) => (\n                                        <span key={index}>{player}</span>\n                                    ))}\n                                </div>\n                            </div>\n                        )\n                )\n            }\n        </div>\n    )\n}\n\nexport default FinishModal\n","import React, { useState, useEffect, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext, socket } from '../App'\nimport Chat from '../components/Chat'\nimport Vote from '../components/Vote'\nimport FinishModal from '../components/FinishModal'\nimport './InGame.css'\n\nInGame.propTypes = {\n    // 정상인은 1, 라이어는 2\n    liar: PropTypes.number\n}\n\nexport default function InGame({ liar }) {\n\n    const [gameTime, setGameTime] = useState(120)\n    const [didMount, setDidMount] = useState(false)\n    const [players, setPlayers] = useState([])\n    const [finishModal, setFinishModal] = useState(false)\n    const [nickname, setNickname] = useContext(NicknameContext)\n\n    useEffect(() => {\n        //! 테스트용 데이터\n        setPlayers([\n            { nickname: \"조세희\", vote: 0 },\n            { nickname: \"문상혁\", vote: 0 },\n            { nickname: \"윤두현\", vote: 0 },\n            { nickname: \"이하은\", vote: 0 }\n        ])\n        startTimer()\n        // mount\n        setDidMount(true)\n    }, [])\n\n    // 120초 타이머 -> 끝나면 finish modal을 띄운다.\n    const startTimer = () => {\n        let i = 120\n        let timer = setInterval(() => {\n            setGameTime(gameTime => gameTime - 1, i -= 1)\n            if (i === 0) {\n\n                // socket : 서버로 투표결과 전송\n                const voteMessage = players.find((item) => item.vote === 1)\n                socket.emit('vote', voteMessage)\n\n                setFinishModal(true)\n                clearInterval(timer)\n            }\n        }, 1000)\n    }\n\n    return (\n        <>\n            <NicknameContext.Consumer>\n                {() => (\n                    didMount &&\n                    <>\n                        <div>{gameTime}</div>\n                        <div className=\"inGame\">\n                            <PlayerContext.Provider value={[players, setPlayers]} >\n                                {liar === 1\n                                    ? <Vote liar={false} title=\"누가 라이어입니까?\" />\n                                    : <Vote liar={true} title=\"나를 지목한 사람\" />\n                                }\n                            </PlayerContext.Provider>\n                            <Chat title={liar === 1 ? \"단어를 설명해주세요\" : \"단어에 대해 아는척 해주세요\"} mount={didMount} />\n                        </div>\n                        {finishModal &&\n                            <>\n                                <FinishModal liar={liar} nickname={nickname} />\n                                <div className=\"modal-background\"></div>\n                            </>\n                        }\n                    </>\n                )\n                }\n            </NicknameContext.Consumer>\n        </>\n    )\n}\n\n// vote context\nexport const PlayerContext = React.createContext()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './WaitingRoom.css'\n\nWaitingRoom.propTypes = {\n    // 각 플레이어의 이름이 담긴 배열\n    players: PropTypes.array.isRequired\n}\n\nfunction WaitingRoom({ players }) {\n    return (\n        <div className=\"waitingRoom frame\">\n            <div className=\"waitingRoom__title\">\n                <p>대기실</p>\n            </div>\n            <div>\n                <p>참여인원 : {players.length}/4명</p>\n                {players.map(((player, index) => (\n                    <div key={index} className=\"waitingRoom__player\">\n                        <p>{player}</p>\n                    </div>\n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default WaitingRoom\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './StartGameModal.css'\n\nStartGameModal.propTypes = {\n    // 라이어라면 true, 아니면 false\n    // liar 값에 따라 모달 내용이 달라짐\n    liar: PropTypes.bool.isRequired,\n\n    // 서버에서 보내준 word값.\n    // 라이어라면 빈칸이 올 것이고 라이어가 아니라면 단어가 올 것.\n    word: PropTypes.string\n}\n\nfunction StartGameModal({ liar, word }) {\n    return (\n        <div className=\"startGameModal frame modal\">\n            <div className=\"title\">\n                {liar\n                    ? <p>당신은 라이어입니다.</p>\n                    : <p>당신은 라이어가 아닙니다.</p>\n                }\n            </div>\n\n            {!liar &&\n                <div className=\"word\">\n                    <div>\n                        <p>{word}</p>\n                    </div>\n                </div>\n            }\n            <div className=\"startGameModal__timer\">\n                5초 뒤 게임이 시작됩니다\n            </div>\n        </div>\n    )\n}\n\nexport default StartGameModal\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Chat from \"../components/Chat\";\nimport { NicknameContext, NowPlayingContext, socket } from \"../App\";\nimport WaitingRoom from \"../components/WaitingRoom\";\nimport StartGameModal from \"../components/StartGameModal\";\nimport \"./Waiting.css\";\n\nexport default function Waiting() {\n\tconst [nickname, _] = useContext(NicknameContext);\n\tconst setNowPlaying = useContext(NowPlayingContext);\n\tconst [players, setPlayers] = useState([]);\n\tconst [activeModal, setActiveModal] = useState(false);\n\n\t//! 서버에서 보내준 값으로 set\n\tconst [liar, setLiar] = useState(false);\n\tconst [word, setWord] = useState(\"컴네\");\n\n\t// useEffect(() => {\n\t// \tsetPlayers([nickname]);\n\t// }, [nickname]);\n\n\tuseEffect(() => {\n\t\t// socket : 서버로부터 받은 입장 메시지 처리. players 배열에 추가\n\t\tsocket.on(\"enter\", async ({ state, player }) => {\n\t\t\tconsole.log(\"enter\", player);\n\n\t\t\t// pseudo code\n\t\t\tstate === \"enter\" && setPlayers((players) => [...players, player]);\n\t\t});\n\n\t\t// socket : 서버로부터 받은 게임시작 메시지 처리.\n\t\t// setLiar : 내가 라이어인지 아닌지\n\t\t// setword : 라이어가 아니라면 설명해야 할 단어\n\t\tsocket.on(\"gameset\", ({ state, player, liar, word }) => {\n\t\t\tconsole.log(\"gameset\", player, liar, word);\n\n\t\t\tif (state === \"gameset\") {\n\t\t\t\tliar ? setLiar(true) : setLiar(false);\n\t\t\t\tliar && setWord(word);\n\t\t\t}\n\t\t});\n\n\t\t// socket : 컴포넌트 죽을때 리스너 제거\n\t\treturn socket.offAny();\n\t}, []);\n\n\t//! Test -> 지금은 버튼이지만 나중에는 서버에서 받은 값으로부터 트리거될것\n\tconst addPlayer = () => {\n\t\tsetPlayers([...players, \"John Doe\"]);\n\t\tif (players.length === 3) {\n\t\t\t/*\n                0. confirm that i'm a liar or not\n                1. pop modal\n                2. setTimeout\n                3. to game\n            */\n\t\t\tsetActiveModal(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetActiveModal(false);\n\t\t\t\tif (liar) {\n\t\t\t\t\tsetNowPlaying(2); // not liar\n\t\t\t\t} else {\n\t\t\t\t\tsetNowPlaying(1); // liar\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<>\n\t\t\t\t\t<button onClick={addPlayer}>테스트</button>\n\t\t\t\t\t<NowPlayingContext.Consumer>\n\t\t\t\t\t\t{() => (\n\t\t\t\t\t\t\t<div className=\"waiting\">\n\t\t\t\t\t\t\t\t<WaitingRoom players={players} />\n\t\t\t\t\t\t\t\t<Chat title={\"채팅\"} mount={true} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</NowPlayingContext.Consumer>\n\t\t\t\t\t{activeModal && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<StartGameModal liar={liar} word={word} />\n\t\t\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n","import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n\n    const onExitClick = () => {\n        // connection 제거\n\n        // 나가기\n        window.open(\"about:blank\", \"_self\");\n        window.close()\n    }\n\n    return (\n        <div className=\"header\">\n            <p>라이어게임</p>\n            <div className=\"header__exitBtn\" onClick={onExitClick}>\n                <p>나가기</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState } from \"react\";\nimport { NicknameContext, socket } from \"../App\";\nimport PropTypes from \"prop-types\";\nimport \"./NicknameModal.css\";\n\nNicknameModal.propTypes = {\n\t// nickname의 setter\n\tsetNickname: PropTypes.func.isRequired,\n};\n\nexport default function NicknameModal({ setNickname }) {\n\tconst [currentNickname, setCurrentNickname] = useState(\"\");\n\n\tconst onInputChange = (e) => {\n\t\tsetCurrentNickname(e.currentTarget.value);\n\t};\n\n\tconst onButtonClick = (e) => {\n\t\tsetNickname(currentNickname);\n\n\t\t(() => {\n\t\t\tsocket.emit(\"enter\", {\n\t\t\t\tstate: \"enter\",\n\t\t\t\tplayer: currentNickname,\n\t\t\t});\n\t\t\tconsole.log(\"emit 'enter' message : \");\n\t\t})();\n\t};\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"nicknameModal frame modal\">\n\t\t\t\t\t<div className=\"title\">안녕하세요!</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<p>사용할 닉네임을 입력해주세요.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"닉네임\"\n\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div className=\"submitBtn\" onClick={onButtonClick}>\n\t\t\t\t\t\t확인\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport InGame from \"./views/InGame\";\nimport Waiting from \"./views/Waiting\";\nimport Header from \"./components/Header\";\nimport NicknameModal from \"./components/NicknameModal\";\nimport io from \"socket.io-client\";\n// import { IP_ADDRESS, PORT } from \"./networking/constants\";\n\nconst endPoint = \"http://13.125.236.234:3001/\";\nexport var socket = io.connect(`${endPoint}`);\n\nexport default function App() {\n\tconst [nickname, setNickname] = useState(\"\");\n\tconst [nowPlaying, setNowPlaying] = useState(0);\n\n\tuseEffect(() => {\n\t\tsocket.on(\n\t\t\t\"connection\",\n\t\t\t(data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t},\n\t\t\t[]\n\t\t);\n\t});\n\n\treturn (\n\t\t<NicknameContext.Provider value={[nickname, setNickname]}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<NowPlayingContext.Provider value={setNowPlaying}>\n\t\t\t\t\t{nowPlaying !== 0 ? (\n\t\t\t\t\t\t<InGame liar={nowPlaying} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Waiting />\n\t\t\t\t\t)}\n\t\t\t\t</NowPlayingContext.Provider>\n\t\t\t\t{!nickname && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<NicknameModal setNickname={setNickname} />\n\t\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</NicknameContext.Provider>\n\t);\n}\n\n// NicknameContext\nexport const NicknameContext = React.createContext();\nexport const NowPlayingContext = React.createContext();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}