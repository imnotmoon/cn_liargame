{"version":3,"sources":["components/ChatMessage.js","components/ChatInGame.js","components/Vote.js","components/FinishModal.js","views/InGame.js","components/ChatWaiting.js","components/WaitingRoom.js","components/StartGameModal.js","views/Waiting.js","components/Header.js","components/NicknameModal.js","App.js","index.js"],"names":["ChatMessage","chat","content","from","className","style","marginRight","msg","Chat","title","useState","inputMessage","setInputMessage","messages","setMessages","useContext","NicknameContext","nickname","chatLogs","useRef","onInputChange","e","currentTarget","value","console","log","onSubmitClick","preventDefault","socket","emit","state","player","text","inputEnterEvent","key","useEffect","document","getElementById","addEventListener","removeEventListener","on","push","offAny","Consumer","ref","map","index","type","onChange","id","onClick","Vote","liar","players","voteCnt","setVoteCnt","onCheck","forEach","vote","getAttribute","alert","data","result","picked","문상혁","이하은","정세은","FinishModal","setPicked","win","setWin","pickedCnt","Object","keys","InGame","finishModal","setFinishModal","axios","post","then","WaitingRoom","length","StartGameModal","word","Waiting","NowPlayingContext","setNowPlaying","setGamePlayers","setPlayers","activeModal","setActiveModal","setLiar","setWord","setTimeout","reduce","prev","cur","Header","window","open","close","NicknameModal","setNickname","currentNickname","setCurrentNickname","inputRef","current","focus","onButtonClick","placeholder","io","connect","App","nowPlaying","Provider","React","createContext","ReactDOM","render"],"mappings":"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","file":"static/js/main.0170e495.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nChatMessage.propTypes = {\n\t// chat : { content(채팅내용), from(누가 보낸 채팅인지) }\n\tchat: PropTypes.object.isRequired,\n};\n\nfunction ChatMessage({ chat }) {\n\tconst { content, from } = chat;\n\n\treturn (\n\t\t<span\n\t\t\tclassName={\n\t\t\t\tfrom === \"self\" ? \"chatMessage my_message\" : \"chatMessage\"\n\t\t\t}\n\t\t>\n\t\t\t<span className=\"chat__profile\" style={{ marginRight: \"5px\" }}>\n\t\t\t\t{from === \"self\" ? \"\" : from}\n\t\t\t</span>\n\t\t\t<span className=\"chat__text\">{content}</span>\n\t\t</span>\n\t);\n}\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./Chat.css\";\nimport { socket, NicknameContext } from \"../App\";\n\nChat.propTypes = {\n\t// 채팅방의 제목\n\ttitle: PropTypes.string.isRequired,\n};\n\nlet msg = [];\n\nfunction Chat({ title }) {\n\tconst [inputMessage, setInputMessage] = useState(\"\"); // 지금 입력하고 있는 메시지 내용\n\tconst [messages, setMessages] = useState([]); // 대화내용\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\tconst chatLogs = useRef();\n\tconst onInputChange = (e) => {\n\t\tsetInputMessage(e.currentTarget.value);\n\t};\n\n\tconsole.log(\"RENDER : CHAT : \", nickname);\n\n\tconst onSubmitClick = (e) => {\n\t\te.preventDefault();\n\n\t\t// socekt : 소켓 통신을 통해 서버로 메시지 전송\n\t\tsocket.emit(\"chat\", {\n\t\t\tstate: \"chat\",\n\t\t\tplayer: nickname,\n\t\t\ttext: inputMessage,\n\t\t});\n\t\tsetInputMessage(\"\");\n\t};\n\n\tconst inputEnterEvent = (e) => {\n\t\tif (e.key === \"Enter\" || e.key === \"Return\") {\n\t\t\tonSubmitClick(e);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument\n\t\t\t.getElementById(\"input-text\")\n\t\t\t.addEventListener(\"keypress\", inputEnterEvent);\n\t\treturn () => {\n\t\t\ttry {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"input-text\")\n\t\t\t\t\t.removeEventListener(\"keypress\", inputEnterEvent);\n\t\t\t} catch {\n\t\t\t\tconsole.log(\"아직..\");\n\t\t\t}\n\t\t};\n\t});\n\n\t// socket : 채팅 메시지 수신\n\tuseEffect(() => {\n\t\tsocket.on(\"chat\", ({ state, player, text }) => {\n\t\t\tif (state === \"chat\" && nickname) {\n\t\t\t\tconsole.log(\"rcvd : \", player, text);\n\t\t\t\t// 채팅 보낸사람이 나면 self로 바꾸고 아니면 그대로 냅둔다.\n\t\t\t\tconsole.log(\"player : \", player, \" - nickname : \", nickname);\n\t\t\t\tplayer = player === nickname ? \"self\" : player;\n\n\t\t\t\t// pseudo code - 채팅내용을 받아와서 messages 배열에 추가\n\t\t\t\tconsole.log(\"nickname : \", player);\n\n\t\t\t\tmsg.push({ content: text, from: player });\n\t\t\t\tconsole.log(msg);\n\t\t\t\tsetMessages([...msg]);\n\t\t\t\t// chatLogs.current.scrollTop = chatLogs.current.scrollHeight;\n\t\t\t}\n\t\t});\n\t}, [nickname]);\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tmsg = [];\n\t\t\tsocket.offAny(\"chat\");\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"chat frame\">\n\t\t\t\t\t<div className=\"chat__title\">\n\t\t\t\t\t\t<p>{title}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__content\" ref={chatLogs}>\n\t\t\t\t\t\t{messages.map((chat, index) => (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tchat={chat}\n\t\t\t\t\t\t\t\tclassName=\"chat__messages\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__sender\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t\t\tvalue={inputMessage}\n\t\t\t\t\t\t\tid=\"input-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={onSubmitClick}>전송</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n\nexport default Chat;\n","import React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NicknameContext } from \"../App\";\nimport { PlayerContext } from \"../views/InGame\";\nimport \"./Vote.css\";\n\nVote.propTypes = {\n\t// 라이어인지 아닌지\n\tliar: PropTypes.bool.isRequired,\n\n\t// 타이틀\n\ttitle: PropTypes.string.isRequired,\n};\n\nfunction Vote({ liar, title, players }) {\n\tconst [voteCnt, setVoteCnt] = useState(3);\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\n\tconsole.log(players);\n\n\tconst onCheck = (e) => {\n\t\tif (voteCnt > 0) {\n\t\t\t// 클릭된 플레이어의 인덱스 가져오기 + 클릭된 플레이어에게 체크 + 다른 플레이어에게 체크된거 제거\n\t\t\tplayers.forEach((player) => {\n\t\t\t\tplayer.vote =\n\t\t\t\t\tplayer.nickname === e.currentTarget.getAttribute(\"data\")\n\t\t\t\t\t\t? 1\n\t\t\t\t\t\t: 0;\n\t\t\t});\n\t\t\tconsole.log(players);\n\n\t\t\t// voteCnt 하나 내리기\n\t\t\tsetVoteCnt((voteCnt) => voteCnt - 1);\n\t\t} else {\n\t\t\talert(\"더 이상 투표할 수 없습니다\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"vote frame\">\n\t\t\t<div className=\"vote__title\">\n\t\t\t\t<p>{title}</p>\n\t\t\t</div>\n\t\t\t{!liar ? (\n\t\t\t\t<div className=\"vote__players\">\n\t\t\t\t\t{players.map(\n\t\t\t\t\t\t(player, index) =>\n\t\t\t\t\t\t\tplayer.nickname !== nickname && (\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tonClick={onCheck}\n\t\t\t\t\t\t\t\t\tdata={player.nickname}\n\t\t\t\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t\t\t\t\"vote__cell\" +\n\t\t\t\t\t\t\t\t\t\t(player.vote === 1 ? \" check\" : \"\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span>{player.nickname}</span>\n\t\t\t\t\t\t\t\t\t<div className=\"vote__check\">O</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<p>남은 투표 횟수 : {voteCnt}/3 회</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className=\"vote__status\">\n\t\t\t\t\t{players.map(\n\t\t\t\t\t\t(player, index) =>\n\t\t\t\t\t\t\tplayer.nickname !== nickname && (\n\t\t\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\t\t\t<span>{player.nickname}</span>\n\t\t\t\t\t\t\t\t\t<span>나를 지목</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default Vote;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport NicknameContext from \"../App\";\nimport \"./FinishModal.css\";\nimport { socket } from \"../App\";\n\nFinishModal.propTypes = {\n\t// 1이면 정상인, 2면 라이어\n\tliar: PropTypes.number.isRequired,\n\n\t// 내 닉네임\n\tnickname: PropTypes.string.isRequired,\n};\n\n//! 가상의 결과데이터\nlet result = {\n\tliar: \"조세희\",\n\tpicked: {\n\t\t문상혁: \"조세희\",\n\t\t이하은: \"조세희\",\n\t\t정세은: \"문상혁\",\n\t},\n};\n\nfunction FinishModal({ liar, nickname }) {\n\tconst [picked, setPicked] = useState([]);\n\tconst [win, setWin] = useState(false);\n\n\t// socket : 동기 안맞을수도 있음 -> result를 state로 바꿔주면됨\n\tuseEffect(() => {\n\t\tconsole.log(result);\n\n\t\t// socket : 게임 결과를 전달받음\n\t\tsocket.on(\"result\", ({ state, liar, picked }) => {\n\t\t\tconsole.log(\"result message received : \", liar, picked);\n\n\t\t\tif (state === \"result\") {\n\t\t\t\tresult.liar = liar;\n\t\t\t\tresult.picked = picked;\n\t\t\t}\n\t\t});\n\n\t\t// 결과(result) 데이터 처리\n\t\tif (liar === 2) {\n\t\t\t// 내가 라이어인 경우\n\t\t\tlet pickedCnt = 0;\n\t\t\tObject.keys(result.picked).forEach((player) => {\n\t\t\t\tconst vote = result.picked[player];\n\t\t\t\tconsole.log(player, vote);\n\t\t\t\tif (vote === result.liar) {\n\t\t\t\t\tpickedCnt += 1;\n\t\t\t\t\tsetPicked((picked) => [...picked, player]);\n\t\t\t\t\tconsole.log(picked);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (pickedCnt >= 2) setWin(false);\n\t\t\telse setWin(true);\n\t\t} else {\n\t\t\t// 내가 정상인인 경우\n\t\t\tObject.keys(result.picked).forEach((player) => {\n\t\t\t\tconst vote = result.picked[player];\n\t\t\t\tif (player === nickname && vote === result.liar) {\n\t\t\t\t\tconsole.log(nickname, player, result.liar, vote);\n\t\t\t\t\tconsole.log(\"이겼구만\");\n\t\t\t\t\tsetWin((win) => !win);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, []);\n\n\treturn (\n\t\t<div className=\"finishModal frame modal\">\n\t\t\t<div className=\"title\">\n\t\t\t\t{win === true\n\t\t\t\t\t? \"게임에서 승리했습니다\"\n\t\t\t\t\t: \"게임에서 패배했습니다\"}\n\t\t\t</div>\n\t\t\t{win === true ? (\n\t\t\t\t\"\"\n\t\t\t) : liar === 1 ? (\n\t\t\t\t<div>\n\t\t\t\t\t<p>라이어는</p>\n\t\t\t\t\t<div>{result.liar}</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>\n\t\t\t\t\t<p>나를 라이어로 지목한 사람</p>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{picked.map((player, index) => (\n\t\t\t\t\t\t\t<span key={index}>{player}</span>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default FinishModal;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { socket } from \"../App\";\nimport Chat from \"../components/ChatInGame\";\nimport Vote from \"../components/Vote\";\nimport FinishModal from \"../components/FinishModal\";\nimport \"./InGame.css\";\nimport axios from \"axios\";\n\nInGame.propTypes = {\n\t// 정상인은 1, 라이어는 2\n\tliar: PropTypes.number,\n};\n\nexport default function InGame({ liar, players, nickname }) {\n\tconst [finishModal, setFinishModal] = useState(false);\n\n\tsocket.on(\"result\", ({ state, liar, picked }) => {\n\t\tsetFinishModal(true);\n\t\taxios\n\t\t\t.post(\"http://13.125.236.234:3001/\", {\n\t\t\t\tvote: \"heheheheheheheh\",\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t{/* <div>{gameTime}</div> */}\n\t\t\t<div className=\"inGame\">\n\t\t\t\t{liar === 1 ? (\n\t\t\t\t\t<Vote\n\t\t\t\t\t\tliar={false}\n\t\t\t\t\t\ttitle=\"누가 라이어입니까?\"\n\t\t\t\t\t\tplayers={players}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<Vote\n\t\t\t\t\t\tliar={true}\n\t\t\t\t\t\ttitle=\"나를 지목한 사람\"\n\t\t\t\t\t\tplayers={players}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t<Chat\n\t\t\t\t\ttitle={\n\t\t\t\t\t\tliar === 1\n\t\t\t\t\t\t\t? \"단어를 설명해주세요\"\n\t\t\t\t\t\t\t: \"단어에 대해 아는척 해주세요\"\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{finishModal && (\n\t\t\t\t<>\n\t\t\t\t\t<FinishModal liar={liar} nickname={nickname} />\n\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n}\n\n// vote context\nexport const PlayerContext = React.createContext();\n","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./Chat.css\";\nimport { socket, NicknameContext } from \"../App\";\n\nChat.propTypes = {\n\t// 채팅방의 제목\n\ttitle: PropTypes.string.isRequired,\n};\n\nlet msg = [];\n\nfunction Chat({ title }) {\n\tconst [inputMessage, setInputMessage] = useState(\"\"); // 지금 입력하고 있는 메시지 내용\n\tconst [messages, setMessages] = useState([]); // 대화내용\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\tconst chatLogs = useRef();\n\tconst onInputChange = (e) => {\n\t\tsetInputMessage(e.currentTarget.value);\n\t};\n\n\tconsole.log(\"RENDER : CHAT : \", nickname);\n\n\tconst onSubmitClick = (e) => {\n\t\te.preventDefault();\n\n\t\t// socekt : 소켓 통신을 통해 서버로 메시지 전송\n\t\tsocket.emit(\"chat\", {\n\t\t\tstate: \"chat\",\n\t\t\tplayer: nickname,\n\t\t\ttext: inputMessage,\n\t\t});\n\t\tsetInputMessage(\"\");\n\t};\n\n\tconst inputEnterEvent = (e) => {\n\t\tif (e.key === \"Enter\" || e.key === \"Return\") {\n\t\t\tonSubmitClick(e);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument\n\t\t\t.getElementById(\"input-text\")\n\t\t\t.addEventListener(\"keypress\", inputEnterEvent);\n\t\treturn () => {\n\t\t\ttry {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"input-text\")\n\t\t\t\t\t.removeEventListener(\"keypress\", inputEnterEvent);\n\t\t\t} catch {\n\t\t\t\tconsole.log(\"아직..\");\n\t\t\t}\n\t\t};\n\t});\n\n\t// socket : 채팅 메시지 수신\n\tuseEffect(() => {\n\t\tsocket.on(\"chat\", ({ state, player, text }) => {\n\t\t\tif (state === \"chat\" && nickname) {\n\t\t\t\tconsole.log(\"rcvd : \", player, text);\n\t\t\t\t// 채팅 보낸사람이 나면 self로 바꾸고 아니면 그대로 냅둔다.\n\t\t\t\tconsole.log(\"player : \", player, \" - nickname : \", nickname);\n\t\t\t\tplayer = player === nickname ? \"self\" : player;\n\n\t\t\t\t// pseudo code - 채팅내용을 받아와서 messages 배열에 추가\n\t\t\t\tconsole.log(\"nickname : \", player);\n\n\t\t\t\tmsg.push({ content: text, from: player });\n\t\t\t\tconsole.log(msg);\n\t\t\t\tsetMessages([...msg]);\n\t\t\t\t// chatLogs.current.scrollTop = chatLogs.current.scrollHeight;\n\t\t\t}\n\t\t});\n\t}, [nickname]);\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tmsg = [];\n\t\t\tsocket.offAny(\"chat\");\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"chat frame\">\n\t\t\t\t\t<div className=\"chat__title\">\n\t\t\t\t\t\t<p>{title}</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__content\" ref={chatLogs}>\n\t\t\t\t\t\t{messages.map((chat, index) => (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tchat={chat}\n\t\t\t\t\t\t\t\tclassName=\"chat__messages\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chat__sender\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t\t\tvalue={inputMessage}\n\t\t\t\t\t\t\tid=\"input-text\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={onSubmitClick}>전송</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n\nexport default Chat;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './WaitingRoom.css'\n\nWaitingRoom.propTypes = {\n    // 각 플레이어의 이름이 담긴 배열\n    players: PropTypes.array.isRequired\n}\n\nfunction WaitingRoom({ players }) {\n    return (\n        <div className=\"waitingRoom frame\">\n            <div className=\"waitingRoom__title\">\n                <p>대기실</p>\n            </div>\n            <div>\n                <p>참여인원 : {players.length}/4명</p>\n                {players.map(((player, index) => (\n                    <div key={index} className=\"waitingRoom__player\">\n                        <p>{player}</p>\n                    </div>\n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default WaitingRoom\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './StartGameModal.css'\n\nStartGameModal.propTypes = {\n    // 라이어라면 true, 아니면 false\n    // liar 값에 따라 모달 내용이 달라짐\n    liar: PropTypes.bool.isRequired,\n\n    // 서버에서 보내준 word값.\n    // 라이어라면 빈칸이 올 것이고 라이어가 아니라면 단어가 올 것.\n    word: PropTypes.string\n}\n\nfunction StartGameModal({ liar, word }) {\n    return (\n        <div className=\"startGameModal frame modal\">\n            <div className=\"title\">\n                {liar\n                    ? <p>당신은 라이어입니다.</p>\n                    : <p>당신은 라이어가 아닙니다.</p>\n                }\n            </div>\n\n            {!liar &&\n                <div className=\"word\">\n                    <div>\n                        <p>{word}</p>\n                    </div>\n                </div>\n            }\n            <div className=\"startGameModal__timer\">\n                5초 뒤 게임이 시작됩니다\n            </div>\n        </div>\n    )\n}\n\nexport default StartGameModal\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Chat from \"../components/ChatWaiting\";\nimport { NicknameContext, NowPlayingContext, socket } from \"../App\";\nimport WaitingRoom from \"../components/WaitingRoom\";\nimport StartGameModal from \"../components/StartGameModal\";\nimport \"./Waiting.css\";\n\nexport default function Waiting({ nickname }) {\n\t// const [nickname, setNickname] = useContext(NicknameContext);\n\tconst { setNowPlaying, setGamePlayers } = useContext(NowPlayingContext);\n\tconst [players, setPlayers] = useState([]);\n\tconst [activeModal, setActiveModal] = useState(false);\n\tconst [currentNickname, setCurrentNickname] = useState(nickname);\n\n\tconst [liar, setLiar] = useState(false);\n\tconst [word, setWord] = useState(\"컴네\");\n\n\tconsole.log(\"Waiting RENDERED : \", nickname);\n\n\tuseEffect(() => {\n\t\t// socket : 서버로부터 받은 입장 메시지 처리. players 배열에 추가\n\t\tsocket.on(\"enter\", ({ state, player }) => {\n\t\t\t// pseudo code\n\t\t\tstate === \"enter\" && setPlayers((players) => player);\n\t\t});\n\n\t\t// socket : 서버로부터 받은 게임시작 메시지 처리.\n\t\t// setLiar : 내가 라이어인지 아닌지\n\t\t// setword : 라이어가 아니라면 설명해야 할 단어\n\t\tsocket.on(\"gameset\", ({ state, player, liar, word }) => {\n\t\t\tconsole.log(\"gameset\", player, liar, word);\n\t\t\tconsole.log(nickname);\n\n\t\t\tif (state === \"gameset\") {\n\t\t\t\tliar === nickname ? setLiar(true) : setLiar(false);\n\t\t\t\tliar && setWord(word);\n\t\t\t\tsetActiveModal(true);\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetActiveModal(false);\n\t\t\t\t\tif (liar === nickname) {\n\t\t\t\t\t\tsetNowPlaying(2); // not liar\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetNowPlaying(1); // liar\n\t\t\t\t\t}\n\t\t\t\t\tsetGamePlayers(\n\t\t\t\t\t\tplayer.reduce((prev, cur) => {\n\t\t\t\t\t\t\treturn [...prev, { nickname: cur, vote: 0 }];\n\t\t\t\t\t\t}, [])\n\t\t\t\t\t);\n\t\t\t\t}, 5000);\n\t\t\t}\n\t\t\treturn socket.offAny();\n\t\t});\n\n\t\t// socket : 컴포넌트 죽을때 리스너 제거\n\t\treturn socket.offAny();\n\t}, [nickname]);\n\n\treturn (\n\t\t<>\n\t\t\t<NowPlayingContext.Consumer>\n\t\t\t\t{() => (\n\t\t\t\t\t<div className=\"waiting\">\n\t\t\t\t\t\t<WaitingRoom players={players} />\n\t\t\t\t\t\t<Chat title={\"채팅\"} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</NowPlayingContext.Consumer>\n\t\t\t{activeModal && (\n\t\t\t\t<>\n\t\t\t\t\t<StartGameModal liar={liar} word={word} />\n\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n\n    const onExitClick = () => {\n        // connection 제거\n\n        // 나가기\n        window.open(\"about:blank\", \"_self\");\n        window.close()\n    }\n\n    return (\n        <div className=\"header\">\n            <p>라이어게임</p>\n            <div className=\"header__exitBtn\" onClick={onExitClick}>\n                <p>나가기</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { NicknameContext, socket } from \"../App\";\nimport PropTypes from \"prop-types\";\nimport \"./NicknameModal.css\";\n\nNicknameModal.propTypes = {\n\t// nickname의 setter\n\tsetNickname: PropTypes.func.isRequired,\n};\n\nexport default function NicknameModal({ setNickname }) {\n\tconst [currentNickname, setCurrentNickname] = useState(\"\");\n\tconst inputRef = useRef();\n\n\tuseEffect(() => {\n\t\tinputRef.current.focus();\n\t});\n\n\tconst onInputChange = (e) => {\n\t\tsetCurrentNickname(e.currentTarget.value);\n\t};\n\n\tconst onButtonClick = (e) => {\n\t\tconsole.log(currentNickname);\n\t\tsetNickname(currentNickname);\n\n\t\t(() => {\n\t\t\tsocket.emit(\"enter\", {\n\t\t\t\tstate: \"enter\",\n\t\t\t\tplayer: currentNickname,\n\t\t\t});\n\t\t\tconsole.log(\"emit 'enter' message : \");\n\t\t})();\n\t};\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"nicknameModal frame modal\">\n\t\t\t\t\t<div className=\"title\">안녕하세요!</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<p>사용할 닉네임을 입력해주세요.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"닉네임\"\n\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div className=\"submitBtn\" onClick={onButtonClick}>\n\t\t\t\t\t\t확인\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport InGame from \"./views/InGame\";\nimport Waiting from \"./views/Waiting\";\nimport Header from \"./components/Header\";\nimport NicknameModal from \"./components/NicknameModal\";\nimport io from \"socket.io-client\";\n// import { IP_ADDRESS, PORT } from \"./networking/constants\";\n\nconst endPoint = \"http://13.125.236.234:3001/\";\nexport var socket = io.connect(`${endPoint}`);\n\nexport default function App() {\n\tconst [nickname, setNickname] = useState(\"\");\n\tconst [nowPlaying, setNowPlaying] = useState(0);\n\tconst [players, setGamePlayers] = useState([]);\n\n\tconsole.log(\"APP RENDERED : \", nickname);\n\n\tuseEffect(() => {\n\t\tsocket.on(\n\t\t\t\"connection\",\n\t\t\t(data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t},\n\t\t\t[]\n\t\t);\n\t});\n\n\tuseEffect(() => {\n\t\tsetNickname(nickname);\n\t}, [nickname]);\n\n\treturn (\n\t\t<NicknameContext.Provider value={[nickname, setNickname]}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<NowPlayingContext.Provider\n\t\t\t\t\tvalue={{ setNowPlaying, setGamePlayers }}\n\t\t\t\t>\n\t\t\t\t\t{nowPlaying !== 0 ? (\n\t\t\t\t\t\t<InGame\n\t\t\t\t\t\t\tliar={nowPlaying}\n\t\t\t\t\t\t\tplayers={players}\n\t\t\t\t\t\t\tnickname={nickname}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Waiting nickname={nickname} />\n\t\t\t\t\t)}\n\t\t\t\t</NowPlayingContext.Provider>\n\t\t\t\t{!nickname && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<NicknameModal setNickname={setNickname} />\n\t\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</NicknameContext.Provider>\n\t);\n}\n\n// NicknameContext\nexport const NicknameContext = React.createContext();\nexport const NowPlayingContext = React.createContext();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}