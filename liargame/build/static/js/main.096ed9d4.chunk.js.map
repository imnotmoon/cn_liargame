{"version":3,"sources":["../node_modules/typescript/lib sync","components/ChatMessage.js","components/Chat.js","components/Vote.js","components/FinishModal.js","views/InGame.js","components/WaitingRoom.js","components/StartGameModal.js","views/Waiting.js","components/Header.js","components/NicknameModal.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ChatMessage","chat","content","from","className","Chat","title","mount","useState","inputMessage","setInputMessage","messages","setMessages","inputEnterEvent","key","useEffect","document","getElementById","addEventListener","removeEventListener","console","log","map","index","type","onChange","currentTarget","value","onClick","preventDefault","Vote","liar","voteCnt","setVoteCnt","useContext","NicknameContext","nickname","PlayerContext","players","onCheck","forEach","player","vote","getAttribute","alert","Consumer","data","result","picked","FinishModal","setPicked","win","setWin","pickedCnt","Object","InGame","gameTime","setGameTime","didMount","setDidMount","setPlayers","finishModal","setFinishModal","startTimer","i","timer","setInterval","clearInterval","Provider","React","createContext","WaitingRoom","length","StartGameModal","word","Waiting","setNowPlaying","NowPlayingContext","activeModal","setActiveModal","addPlayer","setTimeout","Header","window","open","close","NicknameModal","setNickname","currentNickname","setCurrentNickname","onInputChange","onButtonClick","placeholder","App","nowPlaying","ReactDOM","render"],"mappings":"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","file":"static/js/main.096ed9d4.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 7;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nChatMessage.propTypes = {\n\n    // chat : { content(채팅내용), from(누가 보낸 채팅인지) }\n    chat: PropTypes.object.isRequired\n}\n\nfunction ChatMessage({ chat }) {\n\n    const { content, from } = chat\n\n    return (\n        <span className={from === 'self' ? \"chatMessage my_message\" : \"chatMessage\"}>\n            <span className=\"chat__profile\">{from === 'self' ? '' : from}</span>\n            <span className=\"chat__text\">{content}</span>\n        </span>\n    )\n}\n\nexport default ChatMessage\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport ChatMessage from './ChatMessage'\nimport './Chat.css'\n\nChat.propTypes = {\n    // 채팅방의 제목\n    title: PropTypes.string.isRequired\n}\n\nfunction Chat({ title, mount }) {\n\n    const [inputMessage, setInputMessage] = useState('')    // 지금 입력하고 있는 메시지 내용\n    const [messages, setMessages] = useState([])        // 대화내용\n\n    const onInputChange = (e) => {\n        setInputMessage(e.currentTarget.value)\n    }\n\n    const onSubmitClick = (e) => {\n        e.preventDefault()\n\n        // 소켓 통신을 통해 서버로 메시지 전송\n\n\n        // messages 배열에 내가 입력한 메시지로 추가\n        // from이 'self'면 내가 보낸 메시지\n        setMessages(messages => [...messages, {\n            content: inputMessage, from: 'self'\n        }])\n        setInputMessage('')\n    }\n\n    const inputEnterEvent = (e) => {\n        if (e.key === 'Enter' || e.key === 'Return') {\n            setMessages(messages => [...messages, {\n                content: inputMessage, from: 'self'\n            }])\n            setInputMessage('')\n        }\n    }\n\n    useEffect(() => {\n        if (mount) {\n            document.getElementById('input-text').addEventListener('keypress', inputEnterEvent)\n            return () => {\n                try {\n                    document.getElementById('input-text').removeEventListener('keypress', inputEnterEvent)\n                } catch {\n                    console.log(\"아직..\")\n                }\n            }\n        }\n    })\n\n    return (\n        <div className=\"chat frame\">\n            <div className=\"chat__title\">\n                <p>{title}</p>\n            </div>\n            <div className=\"chat__content\">\n                {messages.map((chat, index) => (\n                    <ChatMessage key={index} chat={chat} className=\"chat__messages\" />\n                ))}\n            </div>\n            <div className=\"chat__sender\">\n                <input type=\"text\" onChange={onInputChange} value={inputMessage} id=\"input-text\" />\n                <button onClick={onSubmitClick}>전송</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React, { useState, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext } from '../App'\nimport { PlayerContext } from '../views/InGame'\nimport { isPartiallyEmittedExpression } from 'typescript'\nimport './Vote.css'\n\nVote.propTypes = {\n    // 라이어인지 아닌지\n    liar: PropTypes.bool.isRequired,\n\n    // 타이틀\n    title: PropTypes.string.isRequired,\n}\n\nfunction Vote({ liar, title }) {\n\n    const [voteCnt, setVoteCnt] = useState(3)\n    const [nickname, setNickname] = useContext(NicknameContext)\n    const [players, setPlayers] = useContext(PlayerContext)\n\n    const onCheck = (e) => {\n        if (voteCnt > 0) {\n            // 클릭된 플레이어의 인덱스 가져오기 + 클릭된 플레이어에게 체크 + 다른 플레이어에게 체크된거 제거\n            players.forEach((player) => {\n                player.vote = player.nickname === e.currentTarget.getAttribute('data') ? 1 : 0\n            })\n            console.log(players)\n\n            // voteCnt 하나 내리기\n            setVoteCnt(voteCnt => voteCnt - 1)\n        } else {\n            alert('더 이상 투표할 수 없습니다')\n        }\n    }\n\n    return (\n        <PlayerContext.Consumer>\n            {() => (\n                <div className=\"vote frame\">\n                    <div className=\"vote__title\">\n                        <p>{title}</p>\n                    </div>\n                    { !liar\n                        ? <div className=\"vote__players\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index} onClick={onCheck} data={player.nickname} className={\"vote__cell\" + (player.vote === 1 ? \" check\" : \"\")}>\n                                        <span>{player.nickname}</span>\n                                        <div className=\"vote__check\">O</div>\n                                    </div>\n                                )\n                            ))}\n                            <div>\n                                <p>남은 투표 횟수 : {voteCnt}/3 회</p>\n                            </div>\n                        </div>\n                        : <div className=\"vote__status\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index}>\n                                        <span>{player.nickname}</span>\n                                        <span>나를 지목</span>\n                                    </div>\n                                )\n                            ))}\n                        </div>\n                    }\n                </div>\n            )}\n        </PlayerContext.Consumer>\n    )\n}\n\nexport default Vote\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport NicknameContext from '../App'\nimport './FinishModal.css'\n\nFinishModal.propTypes = {\n\n    // 1이면 정상인, 2면 라이어\n    liar: PropTypes.number.isRequired,\n\n    // 내 닉네임\n    nickname: PropTypes.string.isRequired\n}\n\n//! 가상의 결과데이터\nlet result = {\n    liar: '조세희',\n    picked: {\n        '문상혁': '조세희',\n        '이하은': '조세희',\n        '정세은': '문상혁'\n    }\n}\n\nfunction FinishModal({ liar, nickname }) {\n\n    const [picked, setPicked] = useState([])\n    const [win, setWin] = useState(false)\n\n    useEffect(() => {\n        console.log(result)\n\n        // 게임 결과를 전달받음\n\n        // 결과(result) 데이터 처리\n        //! forEach가 안돌아감..\n        if (liar === 2) {        // 내가 라이어인 경우\n            let pickedCnt = 0\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                console.log(player, vote)\n                if (vote === result.liar) {\n                    pickedCnt += 1\n                    setPicked(picked => [...picked, player])\n                    console.log(picked)\n                }\n            })\n            if (pickedCnt >= 2) setWin(false)\n            else setWin(true)\n        } else {                // 내가 정상인인 경우\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                if (player === nickname && vote === result.liar) {\n                    console.log(nickname, player, result.liar, vote)\n                    console.log(\"이겼구만\")\n                    setWin(win => !win)\n                }\n            })\n        }\n    }, [])\n\n\n    return (\n        <div className=\"finishModal frame modal\">\n            <div className=\"title\">\n                {win === true ? \"게임에서 승리했습니다\" : \"게임에서 패배했습니다\"}\n            </div>\n            { win === true\n                ? \"\"\n                : (\n                    liar === 1\n                        ? (\n                            <div>\n                                <p>라이어는</p>\n                                <div>{result.liar}</div>\n                            </div>\n                        )\n                        : (\n                            <div>\n                                <p>나를 라이어로 지목한 사람</p>\n                                <div>\n                                    {picked.map((player, index) => (\n                                        <span key={index}>{player}</span>\n                                    ))}\n                                </div>\n                            </div>\n                        )\n                )\n            }\n        </div>\n    )\n}\n\nexport default FinishModal\n","import React, { useState, useEffect, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext } from '../App'\nimport Chat from '../components/Chat'\nimport Vote from '../components/Vote'\nimport FinishModal from '../components/FinishModal'\nimport './InGame.css'\n\nInGame.propTypes = {\n    // 정상인은 1, 라이어는 2\n    liar: PropTypes.number\n}\n\nexport default function InGame({ liar }) {\n\n    const [gameTime, setGameTime] = useState(5)\n    const [didMount, setDidMount] = useState(false)\n    const [players, setPlayers] = useState([])\n    const [finishModal, setFinishModal] = useState(false)\n    const [nickname, setNickname] = useContext(NicknameContext)\n\n    useEffect(() => {\n        // 플레이어 리스트 받아오기\n        //! 테스트용 데이터\n        setPlayers([\n            { nickname: \"조세희\", vote: 0 },\n            { nickname: \"문상혁\", vote: 0 },\n            { nickname: \"윤두현\", vote: 0 },\n            { nickname: \"이하은\", vote: 0 }\n        ])\n        startTimer()\n        // mount\n        setDidMount(true)\n    }, [])\n\n    // 120초 타이머 -> 끝나면 finish modal을 띄운다.\n    const startTimer = () => {\n        let i = 5\n        let timer = setInterval(() => {\n            setGameTime(gameTime => gameTime - 1, i -= 1)\n            if (i === 0) {\n                //! 서버로 투표결과 전송\n                setFinishModal(true)\n                clearInterval(timer)\n            }\n        }, 1000)\n    }\n\n    return (\n        <>\n            <NicknameContext.Consumer>\n                {() => (\n                    didMount &&\n                    <>\n                        <div>{gameTime}</div>\n                        <div className=\"inGame\">\n                            <PlayerContext.Provider value={[players, setPlayers]} >\n                                {liar === 1\n                                    ? <Vote liar={false} title=\"누가 라이어입니까?\" />\n                                    : <Vote liar={true} title=\"나를 지목한 사람\" />\n                                }\n                            </PlayerContext.Provider>\n                            <Chat title={liar === 1 ? \"단어를 설명해주세요\" : \"단어에 대해 아는척 해주세요\"} mount={didMount} />\n                        </div>\n                        {finishModal &&\n                            <>\n                                <FinishModal liar={liar} nickname={nickname} />\n                                <div className=\"modal-background\"></div>\n                            </>\n                        }\n                    </>\n                )\n                }\n            </NicknameContext.Consumer>\n        </>\n    )\n}\n\n// vote context\nexport const PlayerContext = React.createContext()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './WaitingRoom.css'\n\nWaitingRoom.propTypes = {\n    // 각 플레이어의 이름이 담긴 배열\n    players: PropTypes.array.isRequired\n}\n\nfunction WaitingRoom({ players }) {\n    return (\n        <div className=\"waitingRoom frame\">\n            <div className=\"waitingRoom__title\">\n                <p>대기실</p>\n            </div>\n            <div>\n                <p>참여인원 : {players.length}/4명</p>\n                {players.map(((player, index) => (\n                    <div key={index} className=\"waitingRoom__player\">\n                        <p>{player}</p>\n                    </div>\n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default WaitingRoom\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './StartGameModal.css'\n\nStartGameModal.propTypes = {\n    // 라이어라면 true, 아니면 false\n    // liar 값에 따라 모달 내용이 달라짐\n    liar: PropTypes.bool.isRequired,\n\n    // 서버에서 보내준 word값.\n    // 라이어라면 빈칸이 올 것이고 라이어가 아니라면 단어가 올 것.\n    word: PropTypes.string\n}\n\nfunction StartGameModal({ liar, word }) {\n    return (\n        <div className=\"startGameModal frame modal\">\n            <div className=\"title\">\n                {liar\n                    ? <p>당신은 라이어입니다.</p>\n                    : <p>당신은 라이어가 아닙니다.</p>\n                }\n            </div>\n\n            {!liar &&\n                <div className=\"word\">\n                    <div>\n                        <p>{word}</p>\n                    </div>\n                </div>\n            }\n            <div className=\"startGameModal__timer\">\n                5초 뒤 게임이 시작됩니다\n            </div>\n        </div>\n    )\n}\n\nexport default StartGameModal\n","import React, { useState, useContext, useEffect } from 'react'\nimport Chat from '../components/Chat'\nimport { NicknameContext, NowPlayingContext } from '../App'\nimport WaitingRoom from '../components/WaitingRoom'\nimport StartGameModal from '../components/StartGameModal'\nimport './Waiting.css'\n\nexport default function Waiting() {\n    const [nickname, _] = useContext(NicknameContext)\n    const setNowPlaying = useContext(NowPlayingContext)\n    const [players, setPlayers] = useState([])\n    const [activeModal, setActiveModal] = useState(false)\n\n    //! 서버에서 보내준 값으로 set\n    const [liar, setLiar] = useState(false)\n    const [word, setWord] = useState('컴네')\n\n    useEffect(() => {\n        setPlayers([nickname])\n    }, [nickname])\n\n    //! Test -> 지금은 버튼이지만 나중에는 서버에서 받은 값으로부터 트리거될것\n    const addPlayer = () => {\n        setPlayers([...players, \"John Doe\"])\n        if (players.length === 3) {\n            /*\n                0. confirm that i'm a liar or not\n                1. pop modal\n                2. setTimeout\n                3. to game\n            */\n            setActiveModal(true)\n            setTimeout(() => {\n                setActiveModal(false)\n                if (liar) {\n                    setNowPlaying(2)    // not liar\n                } else {\n                    setNowPlaying(1)    // liar\n                }\n            }, 5000)\n        }\n    }\n\n    return (\n        <NicknameContext.Consumer>\n            {() => (\n                <>\n                    <button onClick={addPlayer}>테스트</button>\n                    <NowPlayingContext.Consumer>\n                        {() => (\n                            <div className=\"waiting\">\n                                <WaitingRoom players={players} />\n                                <Chat title={\"채팅\"} mount={true} />\n                            </div>\n                        )}\n                    </NowPlayingContext.Consumer>\n                    { activeModal &&\n                        <>\n                            <StartGameModal liar={liar} word={word} />\n                            <div className=\"modal-background\"></div>\n                        </>}\n\n                </>\n            )}\n        </NicknameContext.Consumer>\n\n    )\n}\n","import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n\n    const onExitClick = () => {\n        // connection 제거\n\n        // 나가기\n        window.open(\"about:blank\", \"_self\");\n        window.close()\n    }\n\n    return (\n        <div className=\"header\">\n            <p>라이어게임</p>\n            <div className=\"header__exitBtn\" onClick={onExitClick}>\n                <p>나가기</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport { NicknameContext } from '../App'\nimport PropTypes from 'prop-types'\nimport './NicknameModal.css'\n\n\nNicknameModal.propTypes = {\n    // nickname의 setter\n    setNickname: PropTypes.func.isRequired\n}\n\nexport default function NicknameModal({ setNickname }) {\n\n    const [currentNickname, setCurrentNickname] = useState('')\n\n    const onInputChange = (e) => {\n        setCurrentNickname(e.currentTarget.value)\n    }\n\n    const onButtonClick = (e) => {\n        setNickname(currentNickname)\n    }\n\n    return (\n        <NicknameContext.Consumer>\n            {() => (\n                <div className=\"nicknameModal frame modal\">\n                    <div className=\"title\">\n                        안녕하세요!\n                    </div>\n                    <div className=\"content\">\n                        <p>사용할 닉네임을 입력해주세요.</p>\n                    </div>\n                    <input type=\"text\" placeholder=\"닉네임\" onChange={onInputChange} />\n                    <br />\n                    <div className=\"submitBtn\" onClick={onButtonClick}>확인</div>\n                </div>\n            )}\n        </NicknameContext.Consumer>\n    )\n}\n","import './App.css';\nimport React, { useState, useEffect } from 'react'\n// import { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport InGame from './views/InGame'\nimport Waiting from './views/Waiting'\nimport Header from './components/Header'\nimport NicknameModal from './components/NicknameModal'\n\n\nexport default function App() {\n\n  const [nickname, setNickname] = useState('')\n  const [nowPlaying, setNowPlaying] = useState(0)\n\n  return (\n    <NicknameContext.Provider value={[nickname, setNickname]} >\n      <div className=\"App\">\n        <Header />\n        <NowPlayingContext.Provider value={setNowPlaying} >\n          {\n            nowPlaying !== 0 ? <InGame liar={nowPlaying} /> : <Waiting />\n          }\n        </NowPlayingContext.Provider>\n        {!nickname &&\n          <>\n            <NicknameModal setNickname={setNickname} />\n            <div className=\"modal-background\"></div>\n          </>}\n      </div>\n    </NicknameContext.Provider>\n  );\n}\n\n\n// NicknameContext\nexport const NicknameContext = React.createContext()\nexport const NowPlayingContext = React.createContext()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}