{"version":3,"sources":["../node_modules/typescript/lib sync","components/ChatMessage.js","components/Chat.js","components/Vote.js","components/FinishModal.js","views/InGame.js","components/WaitingRoom.js","components/StartGameModal.js","views/Waiting.js","components/Header.js","components/NicknameModal.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ChatMessage","chat","content","from","className","style","marginRight","msg","Chat","title","mount","useState","inputMessage","setInputMessage","messages","setMessages","useContext","NicknameContext","nickname","chatLogs","useRef","console","log","onSubmitClick","preventDefault","socket","emit","state","player","text","inputEnterEvent","key","useEffect","document","getElementById","addEventListener","removeEventListener","on","push","current","scrollTop","scrollHeight","ref","map","index","type","onChange","currentTarget","value","onClick","Vote","liar","voteCnt","setVoteCnt","PlayerContext","players","onCheck","forEach","vote","getAttribute","alert","Consumer","data","result","picked","FinishModal","setPicked","win","setWin","a","pickedCnt","Object","InGame","gameTime","setGameTime","didMount","setDidMount","setPlayers","finishModal","setFinishModal","startTimer","i","timer","setInterval","voteMessage","find","item","clearInterval","Provider","React","createContext","WaitingRoom","length","StartGameModal","word","Waiting","setNowPlaying","NowPlayingContext","activeModal","setActiveModal","setLiar","setWord","offAny","setTimeout","Header","window","open","close","NicknameModal","setNickname","currentNickname","setCurrentNickname","onInputChange","onButtonClick","placeholder","io","connect","App","nowPlaying","ReactDOM","render"],"mappings":"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","file":"static/js/main.acc07a33.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 24;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nChatMessage.propTypes = {\n\t// chat : { content(채팅내용), from(누가 보낸 채팅인지) }\n\tchat: PropTypes.object.isRequired,\n};\n\nfunction ChatMessage({ chat }) {\n\tconst { content, from } = chat;\n\n\treturn (\n\t\t<span\n\t\t\tclassName={\n\t\t\t\tfrom === \"self\" ? \"chatMessage my_message\" : \"chatMessage\"\n\t\t\t}\n\t\t>\n\t\t\t<span className=\"chat__profile\" style={{ marginRight: \"5px\" }}>\n\t\t\t\t{from === \"self\" ? \"\" : from}\n\t\t\t</span>\n\t\t\t<span className=\"chat__text\">{content}</span>\n\t\t</span>\n\t);\n}\n\nexport default ChatMessage;\n","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./Chat.css\";\nimport { socket, NicknameContext } from \"../App\";\n\nChat.propTypes = {\n\t// 채팅방의 제목\n\ttitle: PropTypes.string.isRequired,\n};\n\nlet msg = [];\n\nfunction Chat({ title, mount }) {\n\tconst [inputMessage, setInputMessage] = useState(\"\"); // 지금 입력하고 있는 메시지 내용\n\tconst [messages, setMessages] = useState([]); // 대화내용\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\tconst chatLogs = useRef();\n\tconst onInputChange = (e) => {\n\t\tsetInputMessage(e.currentTarget.value);\n\t};\n\n\tconsole.log(\"NICKNAME : \", nickname);\n\n\tconst onSubmitClick = (e) => {\n\t\te.preventDefault();\n\n\t\t// socekt : 소켓 통신을 통해 서버로 메시지 전송\n\t\tsocket.emit(\"chat\", {\n\t\t\tstate: \"chat\",\n\t\t\tplayer: nickname,\n\t\t\ttext: inputMessage,\n\t\t});\n\t\tsetInputMessage(\"\");\n\t};\n\n\tconst inputEnterEvent = (e) => {\n\t\tif (e.key === \"Enter\" || e.key === \"Return\") {\n\t\t\tonSubmitClick(e);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tdocument\n\t\t\t.getElementById(\"input-text\")\n\t\t\t.addEventListener(\"keypress\", inputEnterEvent);\n\t\treturn () => {\n\t\t\ttry {\n\t\t\t\tdocument\n\t\t\t\t\t.getElementById(\"input-text\")\n\t\t\t\t\t.removeEventListener(\"keypress\", inputEnterEvent);\n\t\t\t} catch {\n\t\t\t\tconsole.log(\"아직..\");\n\t\t\t}\n\t\t};\n\t});\n\n\t// socket : 채팅 메시지 수신\n\tuseEffect(() => {\n\t\tsocket.on(\"chat\", ({ state, player, text }) => {\n\t\t\tconsole.log(\"receive - chat\", player, text, nickname);\n\n\t\t\t// 채팅 보낸사람이 나면 self로 바꾸고 아니면 그대로 냅둔다.\n\t\t\tplayer = player === nickname ? \"self\" : player;\n\n\t\t\t// pseudo code - 채팅내용을 받아와서 messages 배열에 추가\n\t\t\tif (state === \"chat\" && nickname) {\n\t\t\t\tmsg.push({ content: text, from: player });\n\t\t\t\tsetMessages([...msg]);\n\t\t\t\tchatLogs.current.scrollTop = chatLogs.current.scrollHeight;\n\t\t\t}\n\t\t});\n\t}, [nickname]);\n\n\treturn (\n\t\t<div className=\"chat frame\">\n\t\t\t<div className=\"chat__title\">\n\t\t\t\t<p>{title}</p>\n\t\t\t</div>\n\t\t\t<div className=\"chat__content\" ref={chatLogs}>\n\t\t\t\t{messages.map((chat, index) => (\n\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tchat={chat}\n\t\t\t\t\t\tclassName=\"chat__messages\"\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"chat__sender\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\tvalue={inputMessage}\n\t\t\t\t\tid=\"input-text\"\n\t\t\t\t/>\n\t\t\t\t<button onClick={onSubmitClick}>전송</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Chat;\n","import React, { useState, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext } from '../App'\nimport { PlayerContext } from '../views/InGame'\nimport { isPartiallyEmittedExpression } from 'typescript'\nimport './Vote.css'\nimport { socket } from '../App'\n\nVote.propTypes = {\n    // 라이어인지 아닌지\n    liar: PropTypes.bool.isRequired,\n\n    // 타이틀\n    title: PropTypes.string.isRequired,\n}\n\nfunction Vote({ liar, title }) {\n\n    const [voteCnt, setVoteCnt] = useState(3)\n    const [nickname, setNickname] = useContext(NicknameContext)\n    const [players, setPlayers] = useContext(PlayerContext)\n\n    const onCheck = (e) => {\n        if (voteCnt > 0) {\n            // 클릭된 플레이어의 인덱스 가져오기 + 클릭된 플레이어에게 체크 + 다른 플레이어에게 체크된거 제거\n            players.forEach((player) => {\n                player.vote = player.nickname === e.currentTarget.getAttribute('data') ? 1 : 0\n            })\n            console.log(players)\n\n            // voteCnt 하나 내리기\n            setVoteCnt(voteCnt => voteCnt - 1)\n        } else {\n            alert('더 이상 투표할 수 없습니다')\n        }\n    }\n\n    return (\n        <PlayerContext.Consumer>\n            {() => (\n                <div className=\"vote frame\">\n                    <div className=\"vote__title\">\n                        <p>{title}</p>\n                    </div>\n                    { !liar\n                        ? <div className=\"vote__players\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index} onClick={onCheck} data={player.nickname} className={\"vote__cell\" + (player.vote === 1 ? \" check\" : \"\")}>\n                                        <span>{player.nickname}</span>\n                                        <div className=\"vote__check\">O</div>\n                                    </div>\n                                )\n                            ))}\n                            <div>\n                                <p>남은 투표 횟수 : {voteCnt}/3 회</p>\n                            </div>\n                        </div>\n                        : <div className=\"vote__status\">\n                            {players.map((player, index) => (\n                                player.nickname !== nickname && (\n                                    <div key={index}>\n                                        <span>{player.nickname}</span>\n                                        <span>나를 지목</span>\n                                    </div>\n                                )\n                            ))}\n                        </div>\n                    }\n                </div>\n            )}\n        </PlayerContext.Consumer>\n    )\n}\n\nexport default Vote\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport NicknameContext from '../App'\nimport './FinishModal.css'\nimport { socket } from '../App'\n\nFinishModal.propTypes = {\n\n    // 1이면 정상인, 2면 라이어\n    liar: PropTypes.number.isRequired,\n\n    // 내 닉네임\n    nickname: PropTypes.string.isRequired\n}\n\n//! 가상의 결과데이터\nlet result = {\n    liar: '조세희',\n    picked: {\n        '문상혁': '조세희',\n        '이하은': '조세희',\n        '정세은': '문상혁'\n    }\n}\n\nfunction FinishModal({ liar, nickname }) {\n\n    const [picked, setPicked] = useState([])\n    const [win, setWin] = useState(false)\n\n\n    // socket : 동기 안맞을수도 있음 -> result를 state로 바꿔주면됨\n    useEffect(() => {\n        console.log(result)\n\n        // socket : 게임 결과를 전달받음\n        socket.on('result', async ({state, liar, picked}) => {\n            console.log('result message received : ', liar, picked)\n\n            if(state == 'result') {\n                result.liar = liar\n                result.picked = picked\n            }\n        })\n\n        // 결과(result) 데이터 처리\n        if (liar === 2) {        // 내가 라이어인 경우\n            let pickedCnt = 0\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                console.log(player, vote)\n                if (vote === result.liar) {\n                    pickedCnt += 1\n                    setPicked(picked => [...picked, player])\n                    console.log(picked)\n                }\n            })\n            if (pickedCnt >= 2) setWin(false)\n            else setWin(true)\n        } else {                // 내가 정상인인 경우\n            Object.keys(result.picked).forEach((player) => {\n                const vote = result.picked[player]\n                if (player === nickname && vote === result.liar) {\n                    console.log(nickname, player, result.liar, vote)\n                    console.log(\"이겼구만\")\n                    setWin(win => !win)\n                }\n            })\n        }\n    }, [])\n\n\n    return (\n        <div className=\"finishModal frame modal\">\n            <div className=\"title\">\n                {win === true ? \"게임에서 승리했습니다\" : \"게임에서 패배했습니다\"}\n            </div>\n            { win === true\n                ? \"\"\n                : (\n                    liar === 1\n                        ? (\n                            <div>\n                                <p>라이어는</p>\n                                <div>{result.liar}</div>\n                            </div>\n                        )\n                        : (\n                            <div>\n                                <p>나를 라이어로 지목한 사람</p>\n                                <div>\n                                    {picked.map((player, index) => (\n                                        <span key={index}>{player}</span>\n                                    ))}\n                                </div>\n                            </div>\n                        )\n                )\n            }\n        </div>\n    )\n}\n\nexport default FinishModal\n","import React, { useState, useEffect, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { NicknameContext, socket } from '../App'\nimport Chat from '../components/Chat'\nimport Vote from '../components/Vote'\nimport FinishModal from '../components/FinishModal'\nimport './InGame.css'\n\nInGame.propTypes = {\n    // 정상인은 1, 라이어는 2\n    liar: PropTypes.number\n}\n\nexport default function InGame({ liar }) {\n\n    const [gameTime, setGameTime] = useState(120)\n    const [didMount, setDidMount] = useState(false)\n    const [players, setPlayers] = useState([])\n    const [finishModal, setFinishModal] = useState(false)\n    const [nickname, setNickname] = useContext(NicknameContext)\n\n    useEffect(() => {\n        //! 테스트용 데이터\n        setPlayers([\n            { nickname: \"조세희\", vote: 0 },\n            { nickname: \"문상혁\", vote: 0 },\n            { nickname: \"윤두현\", vote: 0 },\n            { nickname: \"이하은\", vote: 0 }\n        ])\n        startTimer()\n        // mount\n        setDidMount(true)\n    }, [])\n\n    // 120초 타이머 -> 끝나면 finish modal을 띄운다.\n    const startTimer = () => {\n        let i = 120\n        let timer = setInterval(() => {\n            setGameTime(gameTime => gameTime - 1, i -= 1)\n            if (i === 0) {\n\n                // socket : 서버로 투표결과 전송\n                const voteMessage = players.find((item) => item.vote === 1)\n                socket.emit('vote', voteMessage)\n\n                setFinishModal(true)\n                clearInterval(timer)\n            }\n        }, 1000)\n    }\n\n    return (\n        <>\n            <NicknameContext.Consumer>\n                {() => (\n                    didMount &&\n                    <>\n                        <div>{gameTime}</div>\n                        <div className=\"inGame\">\n                            <PlayerContext.Provider value={[players, setPlayers]} >\n                                {liar === 1\n                                    ? <Vote liar={false} title=\"누가 라이어입니까?\" />\n                                    : <Vote liar={true} title=\"나를 지목한 사람\" />\n                                }\n                            </PlayerContext.Provider>\n                            <Chat title={liar === 1 ? \"단어를 설명해주세요\" : \"단어에 대해 아는척 해주세요\"} mount={didMount} />\n                        </div>\n                        {finishModal &&\n                            <>\n                                <FinishModal liar={liar} nickname={nickname} />\n                                <div className=\"modal-background\"></div>\n                            </>\n                        }\n                    </>\n                )\n                }\n            </NicknameContext.Consumer>\n        </>\n    )\n}\n\n// vote context\nexport const PlayerContext = React.createContext()\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './WaitingRoom.css'\n\nWaitingRoom.propTypes = {\n    // 각 플레이어의 이름이 담긴 배열\n    players: PropTypes.array.isRequired\n}\n\nfunction WaitingRoom({ players }) {\n    return (\n        <div className=\"waitingRoom frame\">\n            <div className=\"waitingRoom__title\">\n                <p>대기실</p>\n            </div>\n            <div>\n                <p>참여인원 : {players.length}/4명</p>\n                {players.map(((player, index) => (\n                    <div key={index} className=\"waitingRoom__player\">\n                        <p>{player}</p>\n                    </div>\n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default WaitingRoom\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './StartGameModal.css'\n\nStartGameModal.propTypes = {\n    // 라이어라면 true, 아니면 false\n    // liar 값에 따라 모달 내용이 달라짐\n    liar: PropTypes.bool.isRequired,\n\n    // 서버에서 보내준 word값.\n    // 라이어라면 빈칸이 올 것이고 라이어가 아니라면 단어가 올 것.\n    word: PropTypes.string\n}\n\nfunction StartGameModal({ liar, word }) {\n    return (\n        <div className=\"startGameModal frame modal\">\n            <div className=\"title\">\n                {liar\n                    ? <p>당신은 라이어입니다.</p>\n                    : <p>당신은 라이어가 아닙니다.</p>\n                }\n            </div>\n\n            {!liar &&\n                <div className=\"word\">\n                    <div>\n                        <p>{word}</p>\n                    </div>\n                </div>\n            }\n            <div className=\"startGameModal__timer\">\n                5초 뒤 게임이 시작됩니다\n            </div>\n        </div>\n    )\n}\n\nexport default StartGameModal\n","import React, { useState, useContext, useEffect } from \"react\";\nimport Chat from \"../components/Chat\";\nimport { NicknameContext, NowPlayingContext, socket } from \"../App\";\nimport WaitingRoom from \"../components/WaitingRoom\";\nimport StartGameModal from \"../components/StartGameModal\";\nimport \"./Waiting.css\";\n\nexport default function Waiting() {\n\tconst [nickname, setNickname] = useContext(NicknameContext);\n\tconst setNowPlaying = useContext(NowPlayingContext);\n\tconst [players, setPlayers] = useState([]);\n\tconst [activeModal, setActiveModal] = useState(false);\n\n\t//! 서버에서 보내준 값으로 set\n\tconst [liar, setLiar] = useState(false);\n\tconst [word, setWord] = useState(\"컴네\");\n\n\t// useEffect(() => {\n\t// \tsetPlayers([nickname]);\n\t// }, [nickname]);\n\n\tuseEffect(() => {\n\t\t// socket : 서버로부터 받은 입장 메시지 처리. players 배열에 추가\n\t\tsocket.on(\"enter\", async ({ state, player }) => {\n\t\t\tconsole.log(\"enter\", player);\n\n\t\t\t// pseudo code\n\t\t\tstate === \"enter\" && setPlayers((players) => player);\n\t\t});\n\n\t\t// socket : 서버로부터 받은 게임시작 메시지 처리.\n\t\t// setLiar : 내가 라이어인지 아닌지\n\t\t// setword : 라이어가 아니라면 설명해야 할 단어\n\t\tsocket.on(\"gameset\", ({ state, player, liar, word }) => {\n\t\t\tconsole.log(\"gameset\", player, liar, word);\n\n\t\t\tif (state === \"gameset\") {\n\t\t\t\tliar ? setLiar(true) : setLiar(false);\n\t\t\t\tliar && setWord(word);\n\t\t\t}\n\t\t});\n\n\t\t// socket : 컴포넌트 죽을때 리스너 제거\n\t\treturn socket.offAny();\n\t}, []);\n\n\t//! Test -> 지금은 버튼이지만 나중에는 서버에서 받은 값으로부터 트리거될것\n\tconst addPlayer = () => {\n\t\tsetPlayers([...players, \"John Doe\"]);\n\t\tif (players.length === 3) {\n\t\t\t/*\n                0. confirm that i'm a liar or not\n                1. pop modal\n                2. setTimeout\n                3. to game\n            */\n\t\t\tsetActiveModal(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetActiveModal(false);\n\t\t\t\tif (liar) {\n\t\t\t\t\tsetNowPlaying(2); // not liar\n\t\t\t\t} else {\n\t\t\t\t\tsetNowPlaying(1); // liar\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<button onClick={addPlayer}>테스트</button>\n\t\t\t<NowPlayingContext.Consumer>\n\t\t\t\t{() => (\n\t\t\t\t\t<div className=\"waiting\">\n\t\t\t\t\t\t<WaitingRoom players={players} />\n\t\t\t\t\t\t<Chat title={\"채팅\"} mount={true} />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</NowPlayingContext.Consumer>\n\t\t\t{activeModal && (\n\t\t\t\t<>\n\t\t\t\t\t<StartGameModal liar={liar} word={word} />\n\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t);\n}\n","import React from 'react'\nimport './Header.css'\n\nfunction Header() {\n\n    const onExitClick = () => {\n        // connection 제거\n\n        // 나가기\n        window.open(\"about:blank\", \"_self\");\n        window.close()\n    }\n\n    return (\n        <div className=\"header\">\n            <p>라이어게임</p>\n            <div className=\"header__exitBtn\" onClick={onExitClick}>\n                <p>나가기</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React, { useState } from \"react\";\nimport { NicknameContext, socket } from \"../App\";\nimport PropTypes from \"prop-types\";\nimport \"./NicknameModal.css\";\n\nNicknameModal.propTypes = {\n\t// nickname의 setter\n\tsetNickname: PropTypes.func.isRequired,\n};\n\nexport default function NicknameModal({ setNickname }) {\n\tconst [currentNickname, setCurrentNickname] = useState(\"\");\n\n\tconst onInputChange = (e) => {\n\t\tsetCurrentNickname(e.currentTarget.value);\n\t};\n\n\tconst onButtonClick = (e) => {\n\t\tsetNickname(currentNickname);\n\n\t\t(() => {\n\t\t\tsocket.emit(\"enter\", {\n\t\t\t\tstate: \"enter\",\n\t\t\t\tplayer: currentNickname,\n\t\t\t});\n\t\t\tconsole.log(\"emit 'enter' message : \");\n\t\t})();\n\t};\n\n\treturn (\n\t\t<NicknameContext.Consumer>\n\t\t\t{() => (\n\t\t\t\t<div className=\"nicknameModal frame modal\">\n\t\t\t\t\t<div className=\"title\">안녕하세요!</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<p>사용할 닉네임을 입력해주세요.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"닉네임\"\n\t\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div className=\"submitBtn\" onClick={onButtonClick}>\n\t\t\t\t\t\t확인\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</NicknameContext.Consumer>\n\t);\n}\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\n// import { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport InGame from \"./views/InGame\";\nimport Waiting from \"./views/Waiting\";\nimport Header from \"./components/Header\";\nimport NicknameModal from \"./components/NicknameModal\";\nimport io from \"socket.io-client\";\n// import { IP_ADDRESS, PORT } from \"./networking/constants\";\n\nconst endPoint = \"http://13.125.236.234:3001/\";\nexport var socket = io.connect(`${endPoint}`);\n\nexport default function App() {\n\tconst [nickname, setNickname] = useState(\"\");\n\tconst [nowPlaying, setNowPlaying] = useState(0);\n\n\tuseEffect(() => {\n\t\tsocket.on(\n\t\t\t\"connection\",\n\t\t\t(data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t},\n\t\t\t[]\n\t\t);\n\t});\n\n\treturn (\n\t\t<NicknameContext.Provider value={[nickname, setNickname]}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Header />\n\t\t\t\t<NowPlayingContext.Provider value={setNowPlaying}>\n\t\t\t\t\t{nowPlaying !== 0 ? (\n\t\t\t\t\t\t<InGame liar={nowPlaying} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Waiting />\n\t\t\t\t\t)}\n\t\t\t\t</NowPlayingContext.Provider>\n\t\t\t\t{!nickname && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<NicknameModal setNickname={setNickname} />\n\t\t\t\t\t\t<div className=\"modal-background\"></div>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</NicknameContext.Provider>\n\t);\n}\n\n// NicknameContext\nexport const NicknameContext = React.createContext();\nexport const NowPlayingContext = React.createContext();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}